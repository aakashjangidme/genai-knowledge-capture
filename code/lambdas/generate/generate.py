from aws_lambda_powertools.metrics import MetricUnit
from aws_lambda_powertools.utilities.typing import LambdaContext
from aws_lambda_powertools.utilities.parser import event_parser, BaseModel
from document_generator import (
    markdown_to_html,
    generate_html,
    html_to_pdf,
    add_document_title,
)
from connections import Connections, tracer, logger, metrics
from dataclasses import dataclass
from exceptions import CodeError
from s3url import S3Url
import tempfile
import uuid

s3_client = Connections.s3_client


@dataclass
class Response:
    """
    A class for representing the Output format of the AWS Lambda

    Attributes:
    -----------
    statusCode: int
        A HTTP status code that denotes the output status of validation.
        A `200` values means validation completed successfully
    pdfFileS3Uri: str
        A string that denotes the S3 object URL of the generated PDF file.
    documentName: str
        A string that denotes the name of the document that is being processed.
    serviceName: str
        The name of the AWS Lambda as configured through AWS powertools
    """

    statusCode: int
    pdfFileS3Uri: str
    documentName: str
    serviceName: str = Connections.service_name


class Request(BaseModel):
    """
    A class for representing the Input format of the AWS Lambda

    Attributes:
    -----------
    documentName: str
        A string that denotes the name of the document that is being processed.
    summarizedAnswerS3Uri: str
        A string that contains the S3 object URL of the answer summary that
        was generated by `Summary` lambda
    """

    documentName: str
    summarizedAnswerS3Uri: str


@logger.inject_lambda_context(log_event=True, clear_state=True)
@tracer.capture_lambda_handler
@metrics.log_metrics(capture_cold_start_metric=True)
@event_parser(model=Request)
def lambda_handler(event: Request, context: LambdaContext):
    """
    This is main function that is invoked when AWS Lambda is triggered.
    It validates the Answer Summary to ensure document is not generated
    before and then generates a PDF file from markdown formatted answer
    summary, which is then uploaded to S3 bucket.

    Arguments:
    ----------
        event (dict): The input data from Step function
        context (LambdaContext): This object provides methods and
            properties that provide information about the invocation,
            function, and execution environment.

    Raises:
    -------
        CodeError: A custom exception object that is raised if an error occurs
            while getting Question ID to process. The error message will contain
            the error message from the underlying exception.

    Returns:
    --------
        dict: Returns a JSON or dict object that conforms to the Output format
            defined by the `Response` class
    """
    metrics.add_metric(name="TotalGenerateInvocation", unit=MetricUnit.Count, value=1)

    logger.debug(f"Message body is {event}")

    # Get answer summary location parsed from S3 URI input
    input_uri = S3Url(event.summarizedAnswerS3Uri)
    documentText = get_object_content(input_uri.bucket, input_uri.key, input_uri.url)
    logger.info(f"Document Text for processing is {documentText}")

    # Initialize final output variables
    s3_url = None

    if len(documentText) > 0:
        # Generate PDF file from Answer Summary records
        pdf_file_path = generate_pdf(event.documentName, documentText)
        logger.debug(f"PDF file path is {pdf_file_path}")

        # Upload the generated PDF file to S3 location previously identified
        s3_url = upload_pdf_to_s3(
            pdf_file_path, f"document_storage/{event.documentName}".replace("//", "/")
        )
        logger.debug(f"S3 URL is {s3_url}")
    else:
        # No data available to render as document
        # Raise exception and return error response to Step function
        logger.error("No data available to render as document")
        raise CodeError("No data available to render as document")

    # Validate Output variable and set status code appropriately
    if s3_url:
        statusCode = 200
        metric_name = "DocumentGenerationSuccessful"
    else:
        statusCode = 400
        metric_name = "DocumentGenerationFailed"
        s3_url = ""
        logger.info("Document generation failed")

    metrics.add_metric(name=metric_name, unit=MetricUnit.Count, value=1)

    # Generate JSON Step Function output and return
    response = Response(
        statusCode=statusCode,
        pdfFileS3Uri=s3_url,
        documentName=event.documentName,
    ).__dict__

    logger.debug(f"Lambda Output: {response}")

    return response


@tracer.capture_method
def upload_pdf_to_s3(pdf_file_path: str, file_path: str) -> str | None:
    """
    This method is to upload a PDF file to S3 bucket.

    Arguments:
    ----------
        pdf_file_path (str): The path of the PDF file to be uploaded to S3.
        file_path (str): The final path of the file in S3

    Raises:
    -------
        CodeError: A custom exception object that is raised if any error occurs
            while executing the SQL query. The error message will contain
            the error message from the underlying exception.

    Returns:
    --------
        str: The path of the PDF file that is uploaded to S3.
    """
    logger.info(f"Uploading PDF file to S3: {pdf_file_path}")
    response = None
    try:
        with open(pdf_file_path, "rb") as file:
            s3_client.upload_fileobj(
                file, Connections.s3_bucket_name, f"{file_path}.pdf"
            )

        response = "s3://{0}/{1}.pdf".format(Connections.s3_bucket_name, file_path)

    except Exception as error:
        logger.warning(f"Error occurred while uploading file: {error}")
        raise CodeError(f"Error occurred while uploading file: {error}")
    return response


@tracer.capture_method
def generate_pdf(document_name: str, document_text: str) -> str:
    """
    This method is to generate PDF file from the answer summary records

    Arguments:
    ----------
        document_name (str): Name of the document from `document` table.
        answer_summary_records (tuple[Any, ...]): Answer summary details from executing SQL query

    Returns:
    --------
        str: PDF file path generated from the answer summary records
    """
    # Set temp file location for final PDF generation
    tmp_dir_name = tempfile.gettempdir()
    file_path = f"{tmp_dir_name}/{str(uuid.uuid4())}.pdf"
    logger.info(f"PDF file path: {file_path}")

    # Generate HTML body from the answer summary records
    document_body = render_html_body(document_name, document_text)
    logger.debug(f"HTML body: {document_body}")
    logger.info("Document body generation completed successfully")

    if document_body and len(document_body) > 0:
        # Generate HTML document from HTML body
        html_document = generate_html(document_body)
        logger.info("Complete HTML document generated")

        # Generate PDF file from HTML document
        html_to_pdf(html_document, file_path)
        logger.info("HTML to PDF conversion completed successfully")
    else:
        # Unable to generate document contents
        # Raise exception and return error response to Step function
        logger.warning("Unable to generate document contents")
        raise CodeError("Unable to generate document contents")

    return file_path


@tracer.capture_method
def render_html_body(document_name: str, document_text: str) -> str:
    """
    This method is to generate HTML body from the answer summary records

    Arguments:
    ----------
        document_name (str): Name of the document.
        document_text (str): Content of the document from previous StepFunction

    Returns:
    --------
        str: HTML body generated from the answer summary records
    """
    # Initialize document with Document Name
    document_body = "" + add_document_title(document_name)
    try:
        logger.info("Building document section with text summary")
        text = bytes(document_text, "utf-8").decode("unicode_escape")
        if text.startswith('"') and text.endswith('"'):
            text = text[1:-1]
        document_body = document_body + markdown_to_html(text.strip())
    except Exception as exception:
        # Unable to generate document contents
        # Raise exception and return error response to Step function
        logger.warning(f"Error while generating HTML body: {exception}")
        raise CodeError(f"Error while generating HTML body: {exception}")

    return document_body


@tracer.capture_method
def get_object_content(bucket: str, key: str, url: str) -> str:
    """
    This method is to get the content of the S3 object

    Arguments:
    ----------
        bucket (str): The S3 bucket name
        key (str): The S3 key name
        url (str): The S3 object URL

    Returns:
    --------
        str: The content of the S3 object
    """
    logger.info(f"Getting object content from S3: {url}")
    try:
        response = s3_client.get_object(Bucket=bucket, Key=key)
        content = response["Body"].read().decode("utf-8")
    except Exception as error:
        logger.warning(f"Error occurred while getting object content: {error}")
        raise CodeError(f"Error occurred while getting object content: {error}")
    return content
